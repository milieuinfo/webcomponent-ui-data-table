/**
 * Private Variables
 */
const dataPrefix = `data-${vl.ns}`,
  dtAtt = `${dataPrefix}table`,
  dtDressedAtt = `${dataPrefix}table-dressed`,
  dataCheckedChkboxes = `[${dtAtt}-checkbox]:checked`,
  dataTableChk = `[${dtAtt}-checkbox]`,
  dataActions = `[${dtAtt}-action]`,
  dtSelectableAtt = `${dtAtt}-selectable`,
  dtCheckAllAtt = `${dtAtt}-check-all`,
  dtDisableAtt = `data-${vl.ns}disable`;

class DataTable {
  /**
   * dress one element
   * @param table
   */
  dress(table) {
    table.setAttribute(dtDressedAtt, true);

    const actions = table.querySelectorAll(dataActions),
      chkboxes = table.querySelectorAll(dataTableChk),
      mainChkbox = table.querySelector(`[${dtCheckAllAtt}]`),
      dataRowSelectable = table.querySelectorAll(`[${dtSelectableAtt}]`),
      dataRowSelectableAnchors = table.querySelectorAll(
        ` [${dtSelectableAtt}] a,
          [${dtSelectableAtt}] button,
          [${dtSelectableAtt}] input,
          [${dtSelectableAtt}] label `
      );

    // Detect click on thead checkbox (check all rows)
    if (vl.util.exists(mainChkbox)) {
      mainChkbox.addEventListener('change', () => {
        if (!vl.util.exists(chkboxes)) {
          return;
        }

        vl.util.each(chkboxes, chk => {
          chk.checked = mainChkbox.checked;
        });
      });
    }

    // Detect click on tbody checkbox (check one row)
    if (vl.util.exists(chkboxes)) {
      vl.util.each(chkboxes, chk => {
        chk.addEventListener('change', e => {
          toggleActions();

          if (vl.util.exists(mainChkbox) && !e.target.checked) {
            mainChkbox.checked = false;
          }
        });
      });
    }

    // Detect click on data-table-selectable attribute
    vl.util.each(dataRowSelectable, row => {
      row.addEventListener('click', () => {
        let chk = row.querySelector(dataTableChk);

        if (!vl.util.exists(chk)) {
          return;
        }

        chk.checked = !chk.checked;

        toggleActions();
      });
    });

    // Stop propagation after click on anchor, button, labem or input
    vl.util.each(dataRowSelectableAnchors, anchor => {
      anchor.addEventListener('click', e => {
        e.stopPropagation ? e.stopPropagation() : e.cancelBubble = true;
      });
    });

    // toggle actions
    function toggleActions() {
      if (!vl.util.exists(actions)) {
        return;
      }

      let checkedChkboxes = table.querySelectorAll(dataCheckedChkboxes);

      vl.util.each(actions, action => {
        action.setAttribute(
          dtDisableAtt,
          checkedChkboxes.length ? 'false' : 'true'
        );
        action.setAttribute(
          'aria-hidden',
          checkedChkboxes.length ? 'false' : 'true'
        );
      });
    }
  }

  /**
   * dressAll function for the datatable functionality
   * @return {false}
   */
  dressAll() {
    const tables = document.querySelectorAll(
      `[${dtAtt}]:not([${dtDressedAtt}]):not([data-${vl.ns}js-dress="false"])`
    );

    vl.util.each(tables, table => this.dress(table));
  }
}

if(!('dataTable' in vl)) {
  vl.dataTable = new DataTable();
  vl.dataTable.dressAll();
}

export default DataTable;
