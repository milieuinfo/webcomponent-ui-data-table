(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  global['data-table'] = factory();
}(typeof self !== 'undefined' ? self : this, function () { 'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  /**
   * Private Variables
   */
  var dataPrefix = "data-".concat(vl.ns),
      dtAtt = "".concat(dataPrefix, "table"),
      dtDressedAtt = "".concat(dataPrefix, "table-dressed"),
      dataCheckedChkboxes = "[".concat(dtAtt, "-checkbox]:checked"),
      dataTableChk = "[".concat(dtAtt, "-checkbox]"),
      dataActions = "[".concat(dtAtt, "-action]"),
      dtSelectableAtt = "".concat(dtAtt, "-selectable"),
      dtCheckAllAtt = "".concat(dtAtt, "-check-all"),
      dtDisableAtt = "data-".concat(vl.ns, "disable");

  var DataTable =
  /*#__PURE__*/
  function () {
    function DataTable() {
      _classCallCheck(this, DataTable);
    }

    _createClass(DataTable, [{
      key: "dress",

      /**
       * dress one element
       * @param table
       */
      value: function dress(table) {
        table.setAttribute(dtDressedAtt, true);
        var actions = table.querySelectorAll(dataActions),
            chkboxes = table.querySelectorAll(dataTableChk),
            mainChkbox = table.querySelector("[".concat(dtCheckAllAtt, "]")),
            dataRowSelectable = table.querySelectorAll("[".concat(dtSelectableAtt, "]")),
            dataRowSelectableAnchors = table.querySelectorAll(" [".concat(dtSelectableAtt, "] a,\n          [").concat(dtSelectableAtt, "] button,\n          [").concat(dtSelectableAtt, "] input,\n          [").concat(dtSelectableAtt, "] label ")); // Detect click on thead checkbox (check all rows)

        if (vl.util.exists(mainChkbox)) {
          mainChkbox.addEventListener('change', function () {
            if (!vl.util.exists(chkboxes)) {
              return;
            }

            vl.util.each(chkboxes, function (chk) {
              chk.checked = mainChkbox.checked;
            });
          });
        } // Detect click on tbody checkbox (check one row)


        if (vl.util.exists(chkboxes)) {
          vl.util.each(chkboxes, function (chk) {
            chk.addEventListener('change', function (e) {
              toggleActions();

              if (vl.util.exists(mainChkbox) && !e.target.checked) {
                mainChkbox.checked = false;
              }
            });
          });
        } // Detect click on data-table-selectable attribute


        vl.util.each(dataRowSelectable, function (row) {
          row.addEventListener('click', function () {
            var chk = row.querySelector(dataTableChk);

            if (!vl.util.exists(chk)) {
              return;
            }

            chk.checked = !chk.checked;
            toggleActions();
          });
        }); // Stop propagation after click on anchor, button, labem or input

        vl.util.each(dataRowSelectableAnchors, function (anchor) {
          anchor.addEventListener('click', function (e) {
            e.stopPropagation ? e.stopPropagation() : e.cancelBubble = true;
          });
        }); // toggle actions

        function toggleActions() {
          if (!vl.util.exists(actions)) {
            return;
          }

          var checkedChkboxes = table.querySelectorAll(dataCheckedChkboxes);
          vl.util.each(actions, function (action) {
            action.setAttribute(dtDisableAtt, checkedChkboxes.length ? 'false' : 'true');
            action.setAttribute('aria-hidden', checkedChkboxes.length ? 'false' : 'true');
          });
        }
      }
      /**
       * dressAll function for the datatable functionality
       * @return {false}
       */

    }, {
      key: "dressAll",
      value: function dressAll() {
        var _this = this;

        var tables = document.querySelectorAll("[".concat(dtAtt, "]:not([").concat(dtDressedAtt, "]):not([data-").concat(vl.ns, "js-dress=\"false\"])"));
        vl.util.each(tables, function (table) {
          return _this.dress(table);
        });
      }
    }]);

    return DataTable;
  }();

  if (!('dataTable' in vl)) {
    vl.dataTable = new DataTable();
    vl.dataTable.dressAll();
  }

  return DataTable;

}));
